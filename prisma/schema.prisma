// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//npx prisma db push
//npx prisma generate

generator client {
  provider = "prisma-client-js"
}

// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id       String      @id @default(cuid())
  title    String
  desc     String?
  owner    User?       @relation(fields: [ownerId], references: [id])
  ownerId  String?
  start    DateTime
  startStr String
  end      DateTime
  endStr   String
  allDay   Boolean
  rsvps    EventRSVP[]
}

model EventRSVP {
  id         String  @id @default(cuid())
  event      Event?  @relation(fields: [eventId], references: [id])
  eventId    String?
  attendee   User?   @relation(fields: [attendeeId], references: [id])
  attendeeId String?
  attendance String

  @@unique([eventId, attendeeId])
  @@map("rsvps")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  refresh_token_expires_in String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  ownedEvents   Event[]
  accounts      Account[]
  sessions      Session[]
  rsvps         EventRSVP[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
